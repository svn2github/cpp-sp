
////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1998, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////

// Include header files

    #include "sdlang.h"
    #include "sddialog.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "Uninst.isu"
    #define DLL_FILE "Shell32.dll"


////////////////////// numeric defines ///////////////////////////

    #define WM_SETTINGCHANGE 0x001A
    #define HWND_BROADCAST 0xffff

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----

    // your DLL function prototypes
    prototype Shell32.ShellExecuteA(HWND, LPSTR, LPSTR, LPSTR, LPSTR, INT); //The prototype for ShellExecuteA

// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdShowInfoList();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdSetupType();
    prototype DialogShowSdComponentDialog2();
    prototype DialogShowSdSelectFolder();
    prototype DialogShowSdFinishReboot();

    // your script function prototypes
    prototype AddShibLibPathToSystemPath();
    prototype AddShibConfigEnvironmentVar();
    prototype ReplaceTextInFile(STRING, STRING, STRING);
    prototype ReplaceString(BYREF STRING, STRING, STRING);
    prototype LaunchURL(STRING);

    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bIsWindowsNT4, bIsWindowsNT351, bIsWindows98, bIsWindows95;
    BOOL        bIsShellExplorer, bInstallAborted, bIs32BitSetup;
    STRING      svDir;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;

    // your global variables
    STRING      svSharPort;
    NUMBER      nvSharPort;
    BOOL        bInstallSharAsService;

///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
    Disable( BACKGROUND );

    CheckRequirements();

    SetupInstall();

    SetupScreen();

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;

    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;

    end_install:

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;

begin

    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

//    Dlg_SdLicense:
//    nResult = DialogShowSdLicense();
//    if (nResult = BACK) goto Dlg_SdWelcome;

//    Dlg_SdShowInfoList:
//    nResult = DialogShowSdShowInfoList();
//    if (nResult = BACK) goto Dlg_SdLicense;

    Dlg_SdAskDestPath:
    nResult = DialogShowSdAskDestPath();
    if (nResult = BACK) goto Dlg_SdWelcome; //Dlg_SdLicense; //Dlg_SdShowInfoList;

//    Dlg_SdSetupType:
//    nResult = DialogShowSdSetupType();
//    if (nResult = BACK) goto Dlg_SdAskDestPath;

//    Dlg_SdComponentDialog2:
//    if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
//        goto Dlg_SdSetupType;
//    endif;
//    nResult = DialogShowSdComponentDialog2();
//    if (nResult = BACK) goto Dlg_SdSetupType;

    Dlg_SdSelectFolder:
    nResult = DialogShowSdSelectFolder();
    if (nResult = BACK) goto Dlg_SdAskDestPath; //Dlg_SdComponentDialog2;

    Dlg_SdAskSharPort:
    svSharPort = "1600";
    SetDialogTitle(DLG_ASK_TEXT, "Shar Port Information");
    nResult = AskText("Please enter the TCP port number on which the shar should listen.  (NOTE: This is NOT the web server port and MUST be a valid windows port number that is NOT in use by any other process!)","1600",svSharPort);
    StrToNum(nvSharPort, svSharPort);
    if (nvSharPort > 65534 | nvSharPort < 0) then
        MessageBox("The port number must be between 0 and 65534!", WARNING);
        goto Dlg_SdAskSharPort;
    endif;
    if (nResult = BACK) goto Dlg_SdSelectFolder;

    Dlg_SdAskInstallSharAsService:
    SetDialogTitle(DLG_ASK_YESNO, "Shar Service Information");
    nResult = AskYesNo("Would you like to install the shar as a service?", TRUE);
    if (nResult = 1) then
        bInstallSharAsService = TRUE;
    elseif (nResult = 0) then
        bInstallSharAsService = FALSE;
    endif;
    if (nResult = BACK) goto Dlg_SdAskSharPort;

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    STRING svLogFile;
    NUMBER nResult;

begin

  // Create app information, uninstallation, and App Paths registry keys.

    InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );

    svLogFile = UNINST_LOGFILE_NAME;

    nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((bIs32BitSetup) && (bIsShellExplorer)) then
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
    endif;

    // TO DO : any other tasks you want to perform before file transfer
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the line below:
    //
    //     Enable ( SELFREGISTERBATCH );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = ComponentMoveData( MEDIA, nDisk, 0 );

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile, szMsg;
    STRING svDirectory;
    STRING svFileName;
    STRING svOldTargetDir;
    STRING svSharExe;
    STRING svSharInstallParms;
    NUMBER nResult;

begin

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the lines below:
    //
    //     if Do ( SELFREGISTRATIONPROCESS ) < 0 then
    //         szMsg = "File(s) failed to self-register: \n" + ERRORFILENAME;
    //         MessageBox (szMsg, WARNING);
    //     endif;

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    // Add the Shibboleth Library path to the Windows System path
    SdShowMsg("Adding the shibboleth library path to the windows system path ...", TRUE);
    AddShibLibPathToSystemPath();
    Delay(2);
    SdShowMsg("",FALSE);

    // Add environment variables to the Windows System environment
    SdShowMsg("Adding environment variables to the windows system environment ...", TRUE);
    AddShibConfigEnvironmentVar();
    Delay(2);
    SdShowMsg("",FALSE);

    // Modify the Configuration Files to point to the newly installed files
    SdShowMsg("Modifying configuration files ...", TRUE);
    ParsePath(svDirectory, TARGETDIR + "\\", PATH);
    StrRemoveLastSlash(svDirectory);
    ReplaceString(svDirectory, "\\", "/");
    SRCDIR = TARGETDIR + "\\etc\\shibboleth\\";

    // Rename the Unix-preinstall files
    svOldTargetDir = TARGETDIR;
    TARGETDIR = SRCDIR;
    RenameFile("shibboleth.xml.in", "shibboleth.xml");
    RenameFile("shar.logger.in", "shar.logger");
    RenameFile("shire.logger.in", "shire.logger");
    RenameFile("apache.config.in", "apache.config");
    RenameFile("apache2.config.in", "apache2.config");
    TARGETDIR = svOldTargetDir;

    // Update config files for Windows
    svFileName = "shibboleth.xml";
    ReplaceTextInFile(svFileName, "@-PKGSYSCONFDIR-@", svDirectory + "/etc/shibboleth");
    ReplaceTextInFile(svFileName, "@-LIBEXECDIR-@", svDirectory + "/libexec");
    ReplaceTextInFile(svFileName, "@-LOGDIR-@", svDirectory + "/var/log/shibboleth");
    ReplaceTextInFile(svFileName, "@-PREFIX-@", svDirectory);
    ReplaceTextInFile(svFileName,
        "   <UnixListener address=\"/tmp/shar-socket\"/>",
        "<!-- <UnixListener address=\"/tmp/shar-socket\"/> -->"
        );
    ReplaceTextInFile(svFileName,
        "<!-- <TCPListener address=\"127.0.0.1\" port=\"12345\" acl=\"127.0.0.1\"/> -->",
        "<TCPListener address=\"127.0.0.1\" port=\"" + svSharPort + "\" acl=\"127.0.0.1\"/>"
        );

    svFileName = "shar.logger";
    ReplaceTextInFile(svFileName, "@-LOGDIR-@", svDirectory + "/var/log/shibboleth");
    svFileName = "shire.logger";
    ReplaceTextInFile(svFileName, "@-LOGDIR-@", svDirectory + "/var/log/shibboleth");

    svFileName = "apache.config";
    ReplaceTextInFile(svFileName, "@-PKGSYSCONFDIR-@", svDirectory + "/etc/shibboleth");
    ReplaceTextInFile(svFileName, "@-LIBEXECDIR-@", svDirectory + "/libexec");
    ReplaceTextInFile(svFileName, "@-LOGDIR-@", svDirectory + "/var/log/shibboleth");
    ReplaceTextInFile(svFileName, "@-PREFIX-@", svDirectory);
    svFileName = "apache2.config";
    ReplaceTextInFile(svFileName, "@-PKGSYSCONFDIR-@", svDirectory + "/etc/shibboleth");
    ReplaceTextInFile(svFileName, "@-LIBEXECDIR-@", svDirectory + "/libexec");
    ReplaceTextInFile(svFileName, "@-LOGDIR-@", svDirectory + "/var/log/shibboleth");
    ReplaceTextInFile(svFileName, "@-PREFIX-@", svDirectory);
    Delay(2);
    SdShowMsg("",FALSE);

    // Install the shar as a service if so directed
    if (bInstallSharAsService = TRUE) then
        SdShowMsg("Installing the shar service...", TRUE);
        // Remove any existing Default shar service install
        svSharExe = TARGETDIR + "\\bin\\shar.exe";
        svSharInstallParms = "-remove Default";
        nResult = LaunchAppAndWait(svSharExe, svSharInstallParms, WAIT);
        // Now install the new Default
        svSharExe = TARGETDIR + "\\bin\\shar.exe";
        svSharInstallParms = "-install Default -config " + (TARGETDIR + "\\etc\\shibboleth\\shibboleth.xml -schemadir ") +
            (TARGETDIR + "\\etc\\shibboleth");
        nResult = LaunchAppAndWait(svSharExe, svSharInstallParms, WAIT);
        if (nResult < 0) then
            MessageBox("SHAR service installation FAILED!", WARNING);
        endif;
        Delay(2);
        SdShowMsg("",FALSE);
    endif;

    // Delete the DLL's from the bin directory
    SdShowMsg("Removing Temporary Files...", TRUE);
    nResult = DeleteFile("BIN\\*.dll");
    Delay(2);
    SdShowMsg("",FALSE);

    szReferenceFile = svDir ^ @PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    DeinstallSetReference( szReferenceFile );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult;

begin

    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.

    nResult = CreateRegistrySet( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
    NUMBER nResult;
    STRING szName;
    STRING svPathToLicense;
    STRING svPathToDeployment;

begin


    // TO DO : Add all your folders (or program groups) along with shortcuts (or
    // program items). Call CreateProgramFolder and AddFolderIcon, and/or create
    // shortcuts etc. from the InstallShield IDE's Resources pane.
    //
    // Note : for 16-bit setups you should add an uninstaller icon pointing to
    //        your log file.  Under 32-bit this is automatically done by Windows.
    szName = SHELL_OBJECT_FOLDER;
    svPathToLicense = TARGETDIR + "\\doc\\shibboleth\\license.txt";
    svPathToDeployment = TARGETDIR + "\\doc\\shibboleth\\DEPLOY-GUIDE-TARGET.html";
    LongPathToQuote( svPathToLicense, TRUE );
    LongPathToQuote( svPathToDeployment, TRUE);

    ProgDefGroupType(COMMON);
    CreateProgramFolder( szName );
    AddFolderIcon(  FOLDER_PROGRAMS ^ szName ,
                    "Shibboleth License Agreement",
                    svPathToLicense,
                    "",
                    "",
                    0,
                    "",
                    NULL);

    AddFolderIcon(  FOLDER_PROGRAMS ^ szName ,
                    "Shibboleth Target Deployment Guide",
                    svPathToDeployment,
                    "",
                    "",
                    0,
                    "",
                    NULL);
    nResult = CreateShellObjects( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()
    NUMBER nResult;

begin

    if (bInstallAborted) then
        return 0;
    endif;

    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    if (bIs32BitSetup) then
        svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;
    else
        svDir = PROGRAMFILES ^ @COMPANY_NAME16 ^ @PRODUCT_NAME16; // use short names
    endif;

    TARGETDIR  = svDir;

    SdProductName( @PRODUCT_NAME );

    Enable( DIALOGCACHE );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()

begin

    Enable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );
    SetTitle( @TITLE_MAIN, 24, WHITE );

    SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

    Enable( BACKGROUND );

    Delay( 1 );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

begin

    bIsShellExplorer = FALSE;
    bIsWindowsNT4    = FALSE;
    bIsWindowsNT351  = FALSE;
    bIsWindows95     = FALSE;
    bIsWindows98     = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult = IS_WINDOWSNT) then
        // Check to see if OS is Windows NT 4.0 or Windows NT 3.51,
        // and if the shell being used is the Explorer shell.
        if (GetSystemInfo( WINMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
                bIsShellExplorer = TRUE;
                bIsWindowsNT4 = TRUE;
            else
                bIsWindowsNT351 = TRUE;
            endif;
        endif;

    elseif (nvResult = IS_WINDOWS9X) then
        bIsShellExplorer = TRUE;
        // Check to see if OS is Windows 95 or Windows 98
        GetSystemInfo (WINMINOR, nvResult, svResult);
        if (nvResult < 10) then
           bIsWindows95 = TRUE;
        else
           bIsWindows98 = TRUE;
        endif;
    endif;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin

    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdShowInfoList
//
//  Purpose: This function displays the general information list dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdShowInfoList()
    NUMBER nResult;
    LIST   list;
    STRING szTitle, szMsg, szFile;

begin

    szFile = SUPPORTDIR ^ "infolist.txt";

    list = ListCreate( STRINGLIST );
    ListReadFromFile( list, szFile );
    szTitle  = "";
    szMsg    = " ";
    nResult  = SdShowInfoList( szTitle, szMsg, list );

    ListDestroy( list );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    svDir   = "C:\\opt\\shibboleth"; // Default to the opt\shibboleth directory on the C: Drive
    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );

    // Make sure the TARGETDIR does not have a trailing slash
    StrRemoveLastSlash(svDir);
    TARGETDIR = svDir;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdSetupType
//
//  Purpose: This function displays the standard setup type dialog.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSetupType()
    NUMBER nResult, nType;
    STRING szTitle, szMsg;

begin

    switch (svSetupType)
    case "Typical":
        nType = TYPICAL;
    case "Custom":
        nType = CUSTOM;
    case "Compact":
        nType = COMPACT;
    case "":
        svSetupType = "Typical";
        nType = TYPICAL;
    endswitch;

    szTitle = "";
    szMsg   = "";
    nResult = SetupType( szTitle, szMsg, "", nType, 0 );

    switch (nResult)
        case COMPACT:
            svSetupType = "Compact";
        case TYPICAL:
            svSetupType = "Typical";
        case CUSTOM:
            svSetupType = "Custom";
    endswitch;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdComponentDialog2
//
//  Purpose: This function displays the custom component dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if ((svSetupType != "Custom") && (svSetupType != "")) then
        return 0;
    endif;

    szTitle  = "";
    szMsg    = "";
    nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdSelectFolder
//
//  Purpose: This function displays the standard folder selection dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSelectFolder()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if (SHELL_OBJECT_FOLDER = "") then
        SHELL_OBJECT_FOLDER = @FOLDER_NAME;
    endif;

    szTitle    = "";
    szMsg      = "";
    nResult    = SdSelectFolder( szTitle, szMsg, SHELL_OBJECT_FOLDER );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;

begin
    if (!BATCH_INSTALL) then
        bOpt1 = TRUE;
        bOpt2 = FALSE;
        szMsg1 = "Setup has finished installing %P on your computer.  You should restart your computer before using the software to make sure that the environment is properly configured!";
        szMsg2 = "";
        szOption1 = "Display the Shibboleth Target Deployment Guide?";
        szOption2 = "Restart Computer?";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );
        if (bOpt1 = TRUE) then
            LaunchURL(TARGETDIR+"\\doc\\shibboleth\\DEPLOY-GUIDE-TARGET.html");
        endif;
        if (bOpt2 = TRUE) then
            RebootDialog("", "You have elected to restart your computer!  Are you sure you wish to restart now?", SYS_BOOTMACHINE);
        endif;
        return 0;
    endif;

    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

    return nResult;
end;

////////////////////////////////////////////////////////////////////////////////
//
//  Function: AddShibLibPathToSystemPath
//
//  Purpose: This function adds the Shibboleth Library path to the Windows
//  System Path.
//
////////////////////////////////////////////////////////////////////////////////
function AddShibLibPathToSystemPath()
    NUMBER nResult;
    NUMBER nvType;
    NUMBER nvSize;
    STRING szKey;
    STRING svSystemPath;
    STRING svShibLibPath;
    STRING szEnv;
    POINTER pEnv;

begin

    Disable(LOGGING) ;

    svShibLibPath = TARGETDIR + "\\lib"; // The string you want to add to the System Path
    szKey="SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";

    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

    // Get the current System Path string
    nResult=RegDBGetKeyValueEx(szKey, "Path", nvType, svSystemPath, nvSize);

    // See if the Shibboleth Path is already there
    if (svSystemPath % svShibLibPath) then
    else
        svSystemPath = svSystemPath + ";" + svShibLibPath;

        nResult=RegDBSetKeyValueEx(szKey,"Path",nvType,svSystemPath,-1);

        if (nResult < 0) then
            MessageBox("Setup was unable to add the Shibboleth Library path to the Windows System Path!",WARNING);
        else
            // Flush the NT registry to all applications.

            szEnv = "Environment";
            pEnv = &szEnv ;
            SendMessage (HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv );
        endif;
    endif;

    Enable(LOGGING) ;

    //RebootDialog("","",SYS_BOOTMACHINE);
end;

////////////////////////////////////////////////////////////////////////////////
//
//  Function: AddShibConfigEnvironmentVar
//
//  Purpose: This function adds the Shibconfig environment variable to the
//  Windows System environment.
//
////////////////////////////////////////////////////////////////////////////////
function AddShibConfigEnvironmentVar()
    NUMBER nResult;
    NUMBER nResult2;
    NUMBER nvType;
    NUMBER nvSize;
    STRING szKey;
    STRING svShibConfigPath;
    STRING svShibSchemaPath;
    STRING szEnv;
    POINTER pEnv;

begin

    Disable(LOGGING) ;

    szKey="SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
    svShibConfigPath = TARGETDIR + "\\etc\\shibboleth\\shibboleth.xml";
    svShibSchemaPath = TARGETDIR + "\\etc\\shibboleth";

    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

    // Set the Shibconfig environment variable
    nResult=RegDBSetKeyValueEx(szKey,"SHIBCONFIG",REGDB_STRING_EXPAND,svShibConfigPath,-1);
    nResult2=RegDBSetKeyValueEx(szKey,"SHIBSCHEMAS",REGDB_STRING_EXPAND,svShibSchemaPath,-1);

    if (nResult < 0) then
        MessageBox("Setup was unable to add the SHIBCONFIG/SHIBSCHEMAS environment variables!",WARNING);
    else
        // Flush the NT registry to all applications.
        szEnv = "Environment";
        pEnv = &szEnv ;
        SendMessage (HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv );
    endif;

    Enable(LOGGING) ;

    //RebootDialog("","",SYS_BOOTMACHINE);
end;

////////////////////////////////////////////////////////////////////////////////
//
//  Function: ReplaceTextInFile
//
//  Purpose: This function replaces the specified text in a text file with the
//  specified replacement text.  The replacement takes place globally throughout
//  the file.
//
////////////////////////////////////////////////////////////////////////////////
function ReplaceTextInFile(szFileName, szSearchStr, szReplacementStr)
    NUMBER nResult, nResult2;
    NUMBER nvLineNumber;
    STRING svReturnLine[512];
begin
    nResult = FileGrep (szFileName, szSearchStr, svReturnLine, nvLineNumber, RESTART);
    while (nResult = 0)
        ReplaceString(svReturnLine, szSearchStr, szReplacementStr);
        nResult2 = FileInsertLine(szFileName, svReturnLine, nvLineNumber, REPLACE);
        //NumToStr(svResult2, nResult2);
        nResult = FileGrep (szFileName, szSearchStr, svReturnLine, nvLineNumber, CONTINUE);
    endwhile;

end;

////////////////////////////////////////////////////////////////////////////////
//
//  Function: ReplaceString
//
//  Purpose: This function globally replaces the specified text in a STRING
//  with the specified replacement text.
//
////////////////////////////////////////////////////////////////////////////////
function ReplaceString(svOriginalString, szStringToFind, szReplacementString)
    STRING svSubString1, svSubString2;
    NUMBER nResult;
    NUMBER nLengthOfStringToFind;
    NUMBER nLengthOfOriginalString;
    NUMBER nLengthOfReplacementString;

begin
    nLengthOfStringToFind = StrLength(szStringToFind);              // Length of the String you are looking for
    nLengthOfReplacementString = StrLength(szReplacementString);    // Length of the String you want to replace it with
    nLengthOfOriginalString = StrLength(svOriginalString);          // Length of the Original String
    nResult = StrFind(svOriginalString, szStringToFind);            // Position of the String to Find in the Original String
    while (nResult >= 0)                                            // While the String is Found
        StrSub(svSubString1, svOriginalString, 0, nResult);         // Left portion of the Original String to up to the string you found
        StrSub(svSubString2, svOriginalString, nResult+nLengthOfStringToFind, nLengthOfOriginalString-(nResult+nLengthOfStringToFind)); // Right portion of the Original string after the string you found
        svOriginalString = svSubString1 + szReplacementString + svSubString2; // The new string complete with the replacement
        nLengthOfOriginalString = StrLength(svOriginalString);      // Reset the length of the original string to the length of the new string
        nResult = StrFind(svOriginalString, szStringToFind);        // Look for the string again (incase there are multiple instances of it in the string)
    endwhile;                                                       // End of the loop
end;

////////////////////////////////////////////////////////////////////////////////
//
//  Function: LaunchURL
//
//  Purpose: This function is used to launch a URL from an Installshield Script.
//  It uses the windows function ShellExecute.
//
////////////////////////////////////////////////////////////////////////////////
function LaunchURL(szURL)
    NUMBER nHwndFlag, nResult;
    STRING szOperation, szFile, szPath, szDLL, szParameter;
    POINTER pszOperation, pszFile, pszPath, pszParameter;
    HWND hwndInstall;

begin
    nHwndFlag = HWND_INSTALL;

    // GetWindowHandle retrieves the handle of the installation main window
    hwndInstall = GetWindowHandle(nHwndFlag);

    // Load shell32.DLL into memory.
    szDLL = DLL_FILE;
    nResult = UseDLL (szDLL);

    if (nResult != 0) then
        MessageBox ("UseDLL failed.\n\nCouldn't load Shell32.DLL file.", INFORMATION);
        abort;
    endif;

    szOperation = "OPEN";
    pszOperation = &szOperation;
    szFile = szURL;
    pszFile = &szFile;
    szPath = "";
    pszPath = &szPath;
    szParameter = "";
    pszParameter = &szParameter;
    ShellExecuteA( hwndInstall, pszOperation, pszFile, pszParameter, pszPath, 1); //SW_SHOWMAXIMIZED

    // The following removes Shell32.dll from memory.
    if (UnUseDLL (szDLL) < 0) then
        //MessageBox("UnUseDLL failed.\n\nDLL still in memory.", SEVERE);
    endif;

end;

// --- include script file section ---

#include "sddialog.rul"









